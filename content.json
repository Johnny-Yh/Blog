{"pages":[{"title":"About","text":"SCNU理工男，喜爱各种电子产品","link":"/about/index.html"},{"title":"categories","text":"Linux考研","link":"/categories/index.html"},{"title":"tags","text":"Linux","link":"/tags/index.html"}],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2021/01/12/hello-world/"},{"title":"在Linux下修改Swap分区大小","text":"今天无意间看到主机的swap的大小只有131M，而且占用也快满了，想要修改swap分区大小，改为两倍系统物理内存的大小（1024M），以满足日常使用的需求。 swap分区：通常被称为交换分区，这是一块特殊的硬盘空间，即当实际内存不够用的时候，操作系统会从内存中取出一部分暂时不用的数据，放在交换分区中，从而为当前运行的程序腾出足够的内存空间。 使用free命令查看系统内存的使用情况： [root@PC ~]# free -m total used free shared buff/cache available Mem: 493 184 112 6 195 289 Swap: 131 0 131 可以看到我们这台主机内存有493M，而swap分区只有131M（我之前重新挂载过一次分区，所以当前使用为0M） 使用swapon命令查看swap分区： [root@PC ~]# swapon -s Filename Type Size Used Priority /swap file 135164 0 -2 可以看到swap分区的位置为/swap 使用swapoff命令关闭swap分区： [root@PC ~]# swapoff -a 再次查看系统内存： [root@PC ~]# free -m total used free shared buff/cache available Mem: 493 212 41 6 239 261 Swap: 0 0 0 可以看到swap分区的空间已经变成了0删除当前的swap分区文件： [root@PC ~]# rm /swap rm: remove regular file '/swap'? y 重新创建swap分区：dd命令的部分参数如下：参数bs为一个块的大小，参数count为总的块数 [root@PC ~]# dd if=/dev/zero of=/swap count=1024 bs=1M 1024+0 records in 1024+0 records out 1073741824 bytes (1.1 GB, 1.0 GiB) copied, 3.59162 s, 299 MB/s 查看swap分区： [root@PC ~]# ls / | grep swap swap 可以看到swap已经成功重新创建 为swap文件赋予权限（文件所有者的读写权限）： [root@PC ~]# chmod 600 /swap 查看swap文件权限： [root@PC ~]# ls -lh /swap -rw------- 1 root root 1.0G Mar 17 23:41 /swap 挂载swap分区： [root@PC ~]# mkswap /swap Setting up swapspace version 1, size = 1024 MiB (1073737728 bytes) no label, UUID=c3d2c1dc-adb9-468e-8ab4-fbdc8fead879 打开swap分区： [root@PC ~]# swapon /swap 设置开机启动： [root@PC ~]# vi /etc/fstab 在文件末尾添加如下代码并保存： /swap none swap sw 0 0 再次查看系统内存使用情况： [root@PC ~]# free -m total used free shared buff/cache available Mem: 493 214 6 6 272 259 Swap: 1023 0 1023 swap分区文件大小的修改就完成了！","link":"/2020/03/18/%E5%9C%A8Linux%E4%B8%8B%E4%BF%AE%E6%94%B9Swap%E5%88%86%E5%8C%BA%E5%A4%A7%E5%B0%8F/"},{"title":"Typecho博客","text":"前一阵子腾讯云的数字域名有优惠，于是剁手了一个数字域名。有了域名，突然想起来还有个虚拟主机闲置着，就想随手搭建一个博客（虽然我很少写东西hhh）。博客系统最终选择的是typecho，非常轻量，简洁，一顿操作猛如虎之后，博客也顺利搭建成功。以后我会在这里更新我的文章！","link":"/2020/03/17/Typecho%E5%8D%9A%E5%AE%A2/"},{"title":"给博客加上HTTPS","text":"前言Trojan可以让自己的博客加上Https访问。 下面这张图是部分文档的介绍：它可以仅仅是一个Https的服务器，监听系统的443端口，展开Tls握手，握手成功后，如果判断是其他流量，就会打开一个隧道，将流量转发到预设好的端口，这个端口就可以处理解密后的Http流量了。下面这张图可以更好地理解这样的工作模式：当客户端访问服务器时，服务端监听443端口，如果是客户端的合法流量，那么就由Trojan处理，再访问互联网，如果不是客户端的合法流量（比如浏览器访问服务器上的Https网站），那么在进行Https流量解密之后，服务端会将Http流量转发给nginx监听的80端口，交给Nginx处理，从而使用户可以正常访问服务器上的网站。 开始操作 首先确认自己的博客能够正常地通过Http访问 申请一张Https证书，并准备好证书和密钥文件,放在你的服务器的合适位置 安装Trojan，使用Github上的安装脚本通过curl命令安装： sudo bash -c “$(curl -fsSL https://raw.githubusercontent.com/trojan-gfw/trojan-quickstart/master/trojan-quickstart.sh)&quot; 或者通过wget命令安装： sudo bash -c &quot;$(wget -O- https://raw.githubusercontent.com/trojan-gfw/trojan-quickstart/master/trojan-quickstart.sh)&quot; 修改/usr/local/etc/trojan/config.json文件 设置trojan自动启动 systemctl start trojansystemctl enable trojan 编辑Typecho站点根目录下的文件config.inc.php加入下面一行配置： /** 开启HTTPS */ define('__TYPECHO_SECURE__',true); 注意：Chrome内核的浏览器有不安全提示的时候，需要找到主题目录下面的comments.php文件再将其中的$this&gt;commentUrl()，替换为： echo str_replace(&quot;http&quot;,&quot;https&quot;,$this-&gt;commentUrl()); 最后保存。","link":"/2020/03/31/%E7%BB%99%E5%8D%9A%E5%AE%A2%E5%8A%A0%E4%B8%8AHTTPS/"}],"tags":[{"name":"Linux","slug":"Linux","link":"/tags/Linux/"}],"categories":[{"name":"Linux","slug":"Linux","link":"/categories/Linux/"}]}